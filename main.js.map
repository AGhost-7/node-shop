{"version":3,"sources":["index.coffee","masks.coffee","home.coffee","products.coffee","login.coffee","nav.coffee","cart.coffee","purchases.coffee","register.coffee"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"/source/","sourcesContent":["\napp = angular.module('node-shop', ['ngRoute'])\n\napp\n.config(['$routeProvider', ($routeProvider) ->\n  $routeProvider\n    .when('/home',\n      templateUrl: '/html/home.tmpl'\n      controller: 'homeCtrl'\n    )\n    .when('/product',\n      templateUrl: '/html/products.tmpl'\n      controller: 'productCtrl'\n    )\n    .when('/login',\n      templateUrl: '/html/login.tmpl'\n      controller: 'loginCtrl'\n    )\n    .when('/cart',\n      templateUrl: 'html/cart.tmpl'\n      controller: 'cartCtrl'\n    )\n    .when('/register'\n      templateUrl: 'html/register.tmpl'\n      controller: 'registerCtrl'\n    )\n    .when('/purchases'\n      templateUrl: 'html/purchases.tmpl'\n      controller: 'purchasesCtrl'\n    )\n    .otherwise(redirectTo: '/home')\n\n])\n.run(['$rootScope', '$http', '$location', ($rootScope, $http, $location) ->\n  $rootScope.username = undefined\n\n  $http\n    .get('/user')\n    .success((data) -> $rootScope.username = data.name)\n\n  permissions =\n    logged: ['purchases', 'cart', 'product', 'home']\n    notLogged: ['login', 'home', 'product', 'register']\n\n  $rootScope.$on('$locationChangeStart', (ev, newLoc, oldLoc) ->\n    loc = newLoc.substring(newLoc.lastIndexOf('/') + 1)\n    prevent = false\n    if $rootScope.username?\n      if !permissions.logged.some((elem) -> loc == elem)\n        prevent = true\n    else\n      # user isn't logged in\n      if !permissions.notLogged.some((elem) -> loc == elem)\n        prevent = true\n        ev.preventDefault()\n\n    if prevent\n      ev.preventDefault()\n      if newLoc == oldLoc\n        $location.path('/home')\n  )\n])\n","\napp\n.directive('currencyModel', ->\n  restrict: 'A'\n  require: 'ngModel'\n  link : (scope, el, attrs, ctrl) ->\n    last = undefined\n    ctrl.$parsers.push((input) -> \n      if !el.val().match(/^[0-9]*[.]{0,1}[0-9]{0,2}$/g)\n        ctrl.$setViewValue(last)\n        ctrl.$render()\n      else\n        last = el.val()\n    )\n)\n.directive('intModel', ->\n  restrict: 'A'\n  require: 'ngModel'\n  link: (scope, el, attrs, ctrl) ->\n    last = undefined\n    ctrl.$parsers.push((input) ->\n      if !el.val().match(/^[0-9]*$/g)\n        ctrl.$setViewValue(last)\n        ctrl.$render()\n      else\n        last = el.val()\n    )\n)\n","\nhomeCtrl = ($scope) ->\n\napp.controller('homeCtrl', ['$scope', homeCtrl])\n","\nproductCtrl = ($scope, $routeParams, $http) ->\n\n  $scope.page = $routeParams.page ? 1\n  $scope.manufacturers = []\n  $scope.categories = []\n\n  watchParams = ['name', 'minprice', 'maxprice', 'manufacturer', 'category', 'order']\n  paramNames = watchParams.concat('page')\n\n  search = ->\n    params = {}\n    for name in paramNames\n      if $scope[name]? && $scope[name] != ''\n        params[name] = $scope[name]\n    $http(method: 'GET', url: '/product', params: params)\n      .success((data) ->\n        $scope.items = data\n      )\n\n  for name in watchParams\n    $scope.$watch(name, (n, o)->\n      if n != o\n        $scope.page = 1\n        search()\n    )\n  $scope.$watch('page', search)\n\n  $scope.purchase = (item, amount) ->\n    $http(\n      method: 'POST'\n      url: \"/cart/#{item.id}/#{amount}\"\n    )\n    .success((data) =>\n      item.quantity -= amount\n      if item.quantity == 0\n        $scope.items = $scope.items.filter((e) -> e.id != item.id)\n      else\n        # Make it so that the dropdown goes back to its original state\n        this.amount = undefined\n    )\n\n  $scope.range = (from, to) -> [undefined].concat([from..to])\n\n  $http\n    .get('/product/manufacturer')\n    .success((data) ->\n      $scope.manufacturers = [undefined].concat(data)\n    )\n\n  $http\n    .get('/product/category')\n    .success((data) ->\n      $scope.categories = [undefined].concat(data)\n    )\n\n  $scope.changePage = (i) ->\n    if $scope.page + i > 0 then $scope.page += i\n\n\n\napp.controller('productCtrl', ['$scope', '$routeParams', '$http', productCtrl])\n","loginCtrl = ($scope, $http, $location, $rootScope) ->\n\n  $scope.login = (n, pw)->\n    $http(\n      method: 'POST'\n      url: '/user/login'\n      data:\n        name: n\n        password: pw\n    )\n    .success((data) ->\n      $rootScope.username = data.name\n      $location.path('/home')\n    )\n    .error((data) ->\n      $scope.error = data.message\n    )\n\napp.controller('loginCtrl',\n    ['$scope', '$http', '$location', '$rootScope', loginCtrl])\n","\nnavCtrl = ($scope, $rootScope, $http) ->\n\n  $scope.logout = ->\n    $http\n      .post('/user/logout')\n      .success( ->\n        $rootScope.username = undefined\n      )\n\napp.controller('navCtrl', ['$scope', '$rootScope', '$http', navCtrl])\n","\n\ncartCtrl = ($scope, $http) ->\n  $scope.methods = ['Paypal', 'Credit']\n\n  $http\n    .get('/cart')\n    .success((data) ->\n      for key, val of data\n        $scope[key] = val\n    )\n\n  $scope.remove = (item, index) ->\n    $http\n      .delete('/cart/' + item.id)\n      .success((res) ->\n        $scope.items.splice(index, 1)\n        $scope.subtotal = res.subtotal\n        $scope.tax = res.tax\n        $scope.total = res.total\n      )\n  \n  $scope.purchase = (method)->\n    $http\n      .post('/purchase', method: method)\n      .success((res) ->\n        $scope.items = []# don't need to update rest...\n        $scope.error = undefined\n      )\n      .error((res) -> $scope.error = res.message)\n\n\napp.controller('cartCtrl', ['$scope', '$http', cartCtrl])\n","purchasesCtrl = ($scope, $http)->\n  $scope.receipts = []\n  $http\n    .get('/purchase')\n    .success((res) ->\n      $scope.receipts = res\n    )\n\napp.controller('purchasesCtrl', ['$scope', '$http', purchasesCtrl])\n","\nregisterCtrl = ($scope, $http, $rootScope, $location) ->\n\n  $scope.register = ->\n    if $scope.password != $scope.password2\n      $scope.error = 'Passwords do not match'\n    else\n      $http(\n        url: '/user/register'\n        method: 'POST'\n        data:\n          name: $scope.name\n          email: $scope.email\n          password: $scope.password\n          )\n        .success((res) ->\n          $rootScope.username = res.name\n          $location.path('/home')\n        )\n        .error((res) ->\n          $scope.error = res.message\n        )\n\napp.controller('registerCtrl',\n    ['$scope', '$http', '$rootScope', '$location', registerCtrl])\n"]}